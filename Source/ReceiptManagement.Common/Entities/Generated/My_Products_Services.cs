//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace ReceiptManagement.Common.Entities
{
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class My_Products_Services : Entities.EntityObject
    {
        #region Partial Methods
    
        //	This partial method gives us a way to update an object before it is added to the system.
        static partial void OnCreating();
    
        //	This partial method gives us a way to access an object after it has been added to the system.
        static partial void OnCreated(Entities.My_Products_Services my_Products_Services);

        #endregion

    
        #region Constructors & Factories
    
    	//	Internal constructor since it shouldn't be called outside of the API.
    	//: Making constructor public so that entities can be instantiated by MVC/Telerik controls
    	public My_Products_Services() 
    	{
    		//this.CreatedOn = this.ModifiedOn = DateTime.Parse("1753-01-01 00:00:00.000"); 
    	}
    
    	/// <summary>
    	///		Creates a new instance of a My_Products_Services.
    	/// </summary>
    	/// <returns>The new My_Products_Services instance. </returns>
    	public static Entities.My_Products_Services Factory()
    	{
    		OnCreating();
    		Entities.My_Products_Services my_Products_Services = new Entities.My_Products_Services();
    		OnCreated(my_Products_Services);
    		
    		return my_Products_Services;
    	}

        #endregion

    
        #region Primitive Properties
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<long> Product_Service_Id
        {
            get { return _product_Service_Id; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_product_Service_Id != value)
                    {
                        if (Products_Services != null && Products_Services.Id != value)
                        {
                            Products_Services = null;
                        }
                        _product_Service_Id = value;
                    }
    			}
                finally
                {
                    _settingFK = true;
    			}
            }
        }
        private Nullable<long> _product_Service_Id;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<long> Parent_My_Product_Service_Id
        {
            get { return _parent_My_Product_Service_Id; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_parent_My_Product_Service_Id != value)
                    {
                        if (My_Products_Services2 != null && My_Products_Services2.Id != value)
                        {
                            My_Products_Services2 = null;
                        }
                        _parent_My_Product_Service_Id = value;
                    }
    			}
                finally
                {
                    _settingFK = true;
    			}
            }
        }
        private Nullable<long> _parent_My_Product_Service_Id;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<long> SectionId
        {
            get { return _sectionId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_sectionId != value)
                    {
                        if (Product_Service_Sections != null && Product_Service_Sections.Id != value)
                        {
                            Product_Service_Sections = null;
                        }
                        _sectionId = value;
                    }
    			}
                finally
                {
                    _settingFK = true;
    			}
            }
        }
        private Nullable<long> _sectionId;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<long> ReceiptId
        {
            get { return _receiptId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_receiptId != value)
                    {
                        if (Receipt != null && Receipt.Id != value)
                        {
                            Receipt = null;
                        }
                        _receiptId = value;
                    }
    			}
                finally
                {
                    _settingFK = true;
    			}
            }
        }
        private Nullable<long> _receiptId;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<long> WarrantyCardId
        {
            get { return _warrantyCardId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_warrantyCardId != value)
                    {
                        if (WarrantyCard != null && WarrantyCard.Id != value)
                        {
                            WarrantyCard = null;
                        }
                        _warrantyCardId = value;
                    }
    			}
                finally
                {
                    _settingFK = true;
    			}
            }
        }
        private Nullable<long> _warrantyCardId;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<long> UserId
        {
            get { return _userId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_userId != value)
                    {
                        if (User != null && User.Id != value)
                        {
                            User = null;
                        }
                        _userId = value;
                    }
    			}
                finally
                {
                    _settingFK = true;
    			}
            }
        }
        private Nullable<long> _userId;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual string CreatedOn
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<bool> IsDeleted
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual ICollection<EventsInfo> EventsInfoes
        {
            get
            {
                if (_eventsInfoes == null)
                {
                    var newCollection = new FixupCollection<EventsInfo>();
                    newCollection.CollectionChanged += FixupEventsInfoes;
                    _eventsInfoes = newCollection;
                }
                return _eventsInfoes;
            }
            set
            {
                if (!ReferenceEquals(_eventsInfoes, value))
                {
                    var previousValue = _eventsInfoes as FixupCollection<EventsInfo>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEventsInfoes;
                    }
                    _eventsInfoes = value;
                    var newValue = value as FixupCollection<EventsInfo>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEventsInfoes;
                    }
                }
            }
        }
        private ICollection<EventsInfo> _eventsInfoes;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual ICollection<My_Products_Services> My_Products_Services1
        {
            get
            {
                if (_my_Products_Services1 == null)
                {
                    var newCollection = new FixupCollection<My_Products_Services>();
                    newCollection.CollectionChanged += FixupMy_Products_Services1;
                    _my_Products_Services1 = newCollection;
                }
                return _my_Products_Services1;
            }
            set
            {
                if (!ReferenceEquals(_my_Products_Services1, value))
                {
                    var previousValue = _my_Products_Services1 as FixupCollection<My_Products_Services>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMy_Products_Services1;
                    }
                    _my_Products_Services1 = value;
                    var newValue = value as FixupCollection<My_Products_Services>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMy_Products_Services1;
                    }
                }
            }
        }
        private ICollection<My_Products_Services> _my_Products_Services1;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual My_Products_Services My_Products_Services2
        {
            get { return _my_Products_Services2; }
            set
            {
                if (!ReferenceEquals(_my_Products_Services2, value))
                {
                    var previousValue = _my_Products_Services2;
                    _my_Products_Services2 = value;
                    FixupMy_Products_Services2(previousValue);
                }
            }
        }
        private My_Products_Services _my_Products_Services2;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual Products_Services Products_Services
        {
            get { return _products_Services; }
            set
            {
                if (!ReferenceEquals(_products_Services, value))
                {
                    var previousValue = _products_Services;
                    _products_Services = value;
                    FixupProducts_Services(previousValue);
                }
            }
        }
        private Products_Services _products_Services;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual Receipt Receipt
        {
            get { return _receipt; }
            set
            {
                if (!ReferenceEquals(_receipt, value))
                {
                    var previousValue = _receipt;
                    _receipt = value;
                    FixupReceipt(previousValue);
                }
            }
        }
        private Receipt _receipt;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual Product_Service_Sections Product_Service_Sections
        {
            get { return _product_Service_Sections; }
            set
            {
                if (!ReferenceEquals(_product_Service_Sections, value))
                {
                    var previousValue = _product_Service_Sections;
                    _product_Service_Sections = value;
                    FixupProduct_Service_Sections(previousValue);
                }
            }
        }
        private Product_Service_Sections _product_Service_Sections;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual WarrantyCard WarrantyCard
        {
            get { return _warrantyCard; }
            set
            {
                if (!ReferenceEquals(_warrantyCard, value))
                {
                    var previousValue = _warrantyCard;
                    _warrantyCard = value;
                    FixupWarrantyCard(previousValue);
                }
            }
        }
        private WarrantyCard _warrantyCard;

        #endregion

        #region Association Fixup
    			
    	private bool _settingFK = false; 
    			
        private void FixupMy_Products_Services2(My_Products_Services previousValue)
        {
            if (previousValue != null && previousValue.My_Products_Services1.Contains(this))
            {
                previousValue.My_Products_Services1.Remove(this);
            }
    
            if (My_Products_Services2 != null)
            {
                if (!My_Products_Services2.My_Products_Services1.Contains(this))
                {
                    My_Products_Services2.My_Products_Services1.Add(this);
                }
                if (Parent_My_Product_Service_Id != My_Products_Services2.Id)
                {
                    Parent_My_Product_Service_Id = My_Products_Services2.Id;
                }
            }
            else if (!_settingFK)
            {
                /* [NOTE] -- 
    			 * I have commented following, as in case of detaching entities from ObjectState it was making EntityId Null into referenced entities,
    			 * which is not desired behavior for us.
    			 */
                //Parent_My_Product_Service_Id = null;
            }
        }
    
        private void FixupProducts_Services(Products_Services previousValue)
        {
            if (previousValue != null && previousValue.My_Products_Services.Contains(this))
            {
                previousValue.My_Products_Services.Remove(this);
            }
    
            if (Products_Services != null)
            {
                if (!Products_Services.My_Products_Services.Contains(this))
                {
                    Products_Services.My_Products_Services.Add(this);
                }
                if (Product_Service_Id != Products_Services.Id)
                {
                    Product_Service_Id = Products_Services.Id;
                }
            }
            else if (!_settingFK)
            {
                /* [NOTE] -- 
    			 * I have commented following, as in case of detaching entities from ObjectState it was making EntityId Null into referenced entities,
    			 * which is not desired behavior for us.
    			 */
                //Product_Service_Id = null;
            }
        }
    
        private void FixupReceipt(Receipt previousValue)
        {
            if (previousValue != null && previousValue.My_Products_Services.Contains(this))
            {
                previousValue.My_Products_Services.Remove(this);
            }
    
            if (Receipt != null)
            {
                if (!Receipt.My_Products_Services.Contains(this))
                {
                    Receipt.My_Products_Services.Add(this);
                }
                if (ReceiptId != Receipt.Id)
                {
                    ReceiptId = Receipt.Id;
                }
            }
            else if (!_settingFK)
            {
                /* [NOTE] -- 
    			 * I have commented following, as in case of detaching entities from ObjectState it was making EntityId Null into referenced entities,
    			 * which is not desired behavior for us.
    			 */
                //ReceiptId = null;
            }
        }
    
        private void FixupProduct_Service_Sections(Product_Service_Sections previousValue)
        {
            if (previousValue != null && previousValue.My_Products_Services.Contains(this))
            {
                previousValue.My_Products_Services.Remove(this);
            }
    
            if (Product_Service_Sections != null)
            {
                if (!Product_Service_Sections.My_Products_Services.Contains(this))
                {
                    Product_Service_Sections.My_Products_Services.Add(this);
                }
                if (SectionId != Product_Service_Sections.Id)
                {
                    SectionId = Product_Service_Sections.Id;
                }
            }
            else if (!_settingFK)
            {
                /* [NOTE] -- 
    			 * I have commented following, as in case of detaching entities from ObjectState it was making EntityId Null into referenced entities,
    			 * which is not desired behavior for us.
    			 */
                //SectionId = null;
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.My_Products_Services.Contains(this))
            {
                previousValue.My_Products_Services.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.My_Products_Services.Contains(this))
                {
                    User.My_Products_Services.Add(this);
                }
                if (UserId != User.Id)
                {
                    UserId = User.Id;
                }
            }
            else if (!_settingFK)
            {
                /* [NOTE] -- 
    			 * I have commented following, as in case of detaching entities from ObjectState it was making EntityId Null into referenced entities,
    			 * which is not desired behavior for us.
    			 */
                //UserId = null;
            }
        }
    
        private void FixupWarrantyCard(WarrantyCard previousValue)
        {
            if (previousValue != null && previousValue.My_Products_Services.Contains(this))
            {
                previousValue.My_Products_Services.Remove(this);
            }
    
            if (WarrantyCard != null)
            {
                if (!WarrantyCard.My_Products_Services.Contains(this))
                {
                    WarrantyCard.My_Products_Services.Add(this);
                }
                if (WarrantyCardId != WarrantyCard.Id)
                {
                    WarrantyCardId = WarrantyCard.Id;
                }
            }
            else if (!_settingFK)
            {
                /* [NOTE] -- 
    			 * I have commented following, as in case of detaching entities from ObjectState it was making EntityId Null into referenced entities,
    			 * which is not desired behavior for us.
    			 */
                //WarrantyCardId = null;
            }
        }
    
        private void FixupEventsInfoes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EventsInfo item in e.NewItems)
                {
                    item.My_Products_Services = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EventsInfo item in e.OldItems)
                {
                    if (ReferenceEquals(item.My_Products_Services, this))
                    {
                        item.My_Products_Services = null;
                    }
                }
            }
        }
    
        private void FixupMy_Products_Services1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (My_Products_Services item in e.NewItems)
                {
                    item.My_Products_Services2 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (My_Products_Services item in e.OldItems)
                {
                    if (ReferenceEquals(item.My_Products_Services2, this))
                    {
                        item.My_Products_Services2 = null;
                    }
                }
            }
        }

        #endregion

    }
}
