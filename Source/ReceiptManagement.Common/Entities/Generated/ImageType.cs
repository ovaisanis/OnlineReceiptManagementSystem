//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace ReceiptManagement.Common.Entities
{
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class ImageType : Entities.EntityObject
    {
        #region Partial Methods
    
        //	This partial method gives us a way to update an object before it is added to the system.
        static partial void OnCreating();
    
        //	This partial method gives us a way to access an object after it has been added to the system.
        static partial void OnCreated(Entities.ImageType imageType);

        #endregion

    
        #region Constructors & Factories
    
    	//	Internal constructor since it shouldn't be called outside of the API.
    	//: Making constructor public so that entities can be instantiated by MVC/Telerik controls
    	public ImageType() 
    	{
    		//this.CreatedOn = this.ModifiedOn = DateTime.Parse("1753-01-01 00:00:00.000"); 
    	}
    
    	/// <summary>
    	///		Creates a new instance of a ImageType.
    	/// </summary>
    	/// <returns>The new ImageType instance. </returns>
    	public static Entities.ImageType Factory()
    	{
    		OnCreating();
    		Entities.ImageType imageType = new Entities.ImageType();
    		OnCreated(imageType);
    		
    		return imageType;
    	}

        #endregion

    
        #region Primitive Properties
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual int Id
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual string ImageType1
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual ICollection<Image> Images
        {
            get
            {
                if (_images == null)
                {
                    var newCollection = new FixupCollection<Image>();
                    newCollection.CollectionChanged += FixupImages;
                    _images = newCollection;
                }
                return _images;
            }
            set
            {
                if (!ReferenceEquals(_images, value))
                {
                    var previousValue = _images as FixupCollection<Image>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupImages;
                    }
                    _images = value;
                    var newValue = value as FixupCollection<Image>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupImages;
                    }
                }
            }
        }
        private ICollection<Image> _images;

        #endregion

        #region Association Fixup
    
        private void FixupImages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Image item in e.NewItems)
                {
                    item.ImageType = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Image item in e.OldItems)
                {
                    if (ReferenceEquals(item.ImageType, this))
                    {
                        item.ImageType = null;
                    }
                }
            }
        }

        #endregion

    }
}
