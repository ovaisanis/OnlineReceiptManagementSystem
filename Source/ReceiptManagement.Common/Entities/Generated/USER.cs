//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace ReceiptManagement.Common.Entities
{
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class User : Entities.EntityObject
    {
        #region Partial Methods
    
        //	This partial method gives us a way to update an object before it is added to the system.
        static partial void OnCreating();
    
        //	This partial method gives us a way to access an object after it has been added to the system.
        static partial void OnCreated(Entities.User user);

        #endregion

    
        #region Constructors & Factories
    
    	//	Internal constructor since it shouldn't be called outside of the API.
    	//: Making constructor public so that entities can be instantiated by MVC/Telerik controls
    	public User() 
    	{
    		//this.CreatedOn = this.ModifiedOn = DateTime.Parse("1753-01-01 00:00:00.000"); 
    	}
    
    	/// <summary>
    	///		Creates a new instance of a User.
    	/// </summary>
    	/// <returns>The new User instance. </returns>
    	public static Entities.User Factory()
    	{
    		OnCreating();
    		Entities.User user = new Entities.User();
    		OnCreated(user);
    		
    		return user;
    	}

        #endregion

    
        #region Primitive Properties
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual string FirstName
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual string LastName
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual string Email
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual string Password
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual int RoleId
        {
            get { return _roleId; }
            set
            {
                if (_roleId != value)
                {
                    if (Role != null && Role.Id != value)
                    {
                        Role = null;
                    }
                    _roleId = value;
                }
            }
        }
        private int _roleId;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual System.DateTime CreatedOn
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<System.DateTime> LastLogin
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual ICollection<EventsInfo> EventsInfoes
        {
            get
            {
                if (_eventsInfoes == null)
                {
                    var newCollection = new FixupCollection<EventsInfo>();
                    newCollection.CollectionChanged += FixupEventsInfoes;
                    _eventsInfoes = newCollection;
                }
                return _eventsInfoes;
            }
            set
            {
                if (!ReferenceEquals(_eventsInfoes, value))
                {
                    var previousValue = _eventsInfoes as FixupCollection<EventsInfo>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEventsInfoes;
                    }
                    _eventsInfoes = value;
                    var newValue = value as FixupCollection<EventsInfo>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEventsInfoes;
                    }
                }
            }
        }
        private ICollection<EventsInfo> _eventsInfoes;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual ICollection<My_Products_Services> My_Products_Services
        {
            get
            {
                if (_my_Products_Services == null)
                {
                    var newCollection = new FixupCollection<My_Products_Services>();
                    newCollection.CollectionChanged += FixupMy_Products_Services;
                    _my_Products_Services = newCollection;
                }
                return _my_Products_Services;
            }
            set
            {
                if (!ReferenceEquals(_my_Products_Services, value))
                {
                    var previousValue = _my_Products_Services as FixupCollection<My_Products_Services>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMy_Products_Services;
                    }
                    _my_Products_Services = value;
                    var newValue = value as FixupCollection<My_Products_Services>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMy_Products_Services;
                    }
                }
            }
        }
        private ICollection<My_Products_Services> _my_Products_Services;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual ICollection<Products_Services> Products_Services
        {
            get
            {
                if (_products_Services == null)
                {
                    var newCollection = new FixupCollection<Products_Services>();
                    newCollection.CollectionChanged += FixupProducts_Services;
                    _products_Services = newCollection;
                }
                return _products_Services;
            }
            set
            {
                if (!ReferenceEquals(_products_Services, value))
                {
                    var previousValue = _products_Services as FixupCollection<Products_Services>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProducts_Services;
                    }
                    _products_Services = value;
                    var newValue = value as FixupCollection<Products_Services>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProducts_Services;
                    }
                }
            }
        }
        private ICollection<Products_Services> _products_Services;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual ICollection<Receipt> Receipts
        {
            get
            {
                if (_receipts == null)
                {
                    var newCollection = new FixupCollection<Receipt>();
                    newCollection.CollectionChanged += FixupReceipts;
                    _receipts = newCollection;
                }
                return _receipts;
            }
            set
            {
                if (!ReferenceEquals(_receipts, value))
                {
                    var previousValue = _receipts as FixupCollection<Receipt>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupReceipts;
                    }
                    _receipts = value;
                    var newValue = value as FixupCollection<Receipt>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupReceipts;
                    }
                }
            }
        }
        private ICollection<Receipt> _receipts;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual Role Role
        {
            get { return _role; }
            set
            {
                if (!ReferenceEquals(_role, value))
                {
                    var previousValue = _role;
                    _role = value;
                    FixupRole(previousValue);
                }
            }
        }
        private Role _role;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual System_Social_UsersAssociation System_Social_UsersAssociation
        {
            get { return _system_Social_UsersAssociation; }
            set
            {
                if (!ReferenceEquals(_system_Social_UsersAssociation, value))
                {
                    var previousValue = _system_Social_UsersAssociation;
                    _system_Social_UsersAssociation = value;
                    FixupSystem_Social_UsersAssociation(previousValue);
                }
            }
        }
        private System_Social_UsersAssociation _system_Social_UsersAssociation;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual ICollection<WarrantyCard> WarrantyCards
        {
            get
            {
                if (_warrantyCards == null)
                {
                    var newCollection = new FixupCollection<WarrantyCard>();
                    newCollection.CollectionChanged += FixupWarrantyCards;
                    _warrantyCards = newCollection;
                }
                return _warrantyCards;
            }
            set
            {
                if (!ReferenceEquals(_warrantyCards, value))
                {
                    var previousValue = _warrantyCards as FixupCollection<WarrantyCard>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupWarrantyCards;
                    }
                    _warrantyCards = value;
                    var newValue = value as FixupCollection<WarrantyCard>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupWarrantyCards;
                    }
                }
            }
        }
        private ICollection<WarrantyCard> _warrantyCards;

        #endregion

        #region Association Fixup
    
        private void FixupRole(Role previousValue)
        {
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (Role != null)
            {
                if (!Role.Users.Contains(this))
                {
                    Role.Users.Add(this);
                }
                if (RoleId != Role.Id)
                {
                    RoleId = Role.Id;
                }
            }
        }
    
        private void FixupSystem_Social_UsersAssociation(System_Social_UsersAssociation previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.User, this))
            {
                previousValue.User = null;
            }
    
            if (System_Social_UsersAssociation != null)
            {
                System_Social_UsersAssociation.User = this;
            }
        }
    
        private void FixupEventsInfoes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EventsInfo item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EventsInfo item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupMy_Products_Services(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (My_Products_Services item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (My_Products_Services item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupProducts_Services(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Products_Services item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Products_Services item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupReceipts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Receipt item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Receipt item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupWarrantyCards(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (WarrantyCard item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WarrantyCard item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }

        #endregion

    }
}
