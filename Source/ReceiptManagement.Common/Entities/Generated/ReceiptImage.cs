//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace ReceiptManagement.Common.Entities
{
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class ReceiptImage : Entities.EntityObject
    {
        #region Partial Methods
    
        //	This partial method gives us a way to update an object before it is added to the system.
        static partial void OnCreating();
    
        //	This partial method gives us a way to access an object after it has been added to the system.
        static partial void OnCreated(Entities.ReceiptImage receiptImage);

        #endregion

    
        #region Constructors & Factories
    
    	//	Internal constructor since it shouldn't be called outside of the API.
    	//: Making constructor public so that entities can be instantiated by MVC/Telerik controls
    	public ReceiptImage() 
    	{
    		//this.CreatedOn = this.ModifiedOn = DateTime.Parse("1753-01-01 00:00:00.000"); 
    	}
    
    	/// <summary>
    	///		Creates a new instance of a ReceiptImage.
    	/// </summary>
    	/// <returns>The new ReceiptImage instance. </returns>
    	public static Entities.ReceiptImage Factory()
    	{
    		OnCreating();
    		Entities.ReceiptImage receiptImage = new Entities.ReceiptImage();
    		OnCreated(receiptImage);
    		
    		return receiptImage;
    	}

        #endregion

    
        #region Primitive Properties
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<long> ReceiptId
        {
            get { return _receiptId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_receiptId != value)
                    {
                        if (Receipt != null && Receipt.Id != value)
                        {
                            Receipt = null;
                        }
                        _receiptId = value;
                    }
    			}
                finally
                {
                    _settingFK = true;
    			}
            }
        }
        private Nullable<long> _receiptId;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<long> ImageId
        {
            get { return _imageId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_imageId != value)
                    {
                        if (Image != null && Image.Id != value)
                        {
                            Image = null;
                        }
                        _imageId = value;
                    }
    			}
                finally
                {
                    _settingFK = true;
    			}
            }
        }
        private Nullable<long> _imageId;

        #endregion

        #region Navigation Properties
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual Image Image
        {
            get { return _image; }
            set
            {
                if (!ReferenceEquals(_image, value))
                {
                    var previousValue = _image;
                    _image = value;
                    FixupImage(previousValue);
                }
            }
        }
        private Image _image;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual Receipt Receipt
        {
            get { return _receipt; }
            set
            {
                if (!ReferenceEquals(_receipt, value))
                {
                    var previousValue = _receipt;
                    _receipt = value;
                    FixupReceipt(previousValue);
                }
            }
        }
        private Receipt _receipt;

        #endregion

        #region Association Fixup
    			
    	private bool _settingFK = false; 
    			
        private void FixupImage(Image previousValue)
        {
            if (previousValue != null && previousValue.ReceiptImages.Contains(this))
            {
                previousValue.ReceiptImages.Remove(this);
            }
    
            if (Image != null)
            {
                if (!Image.ReceiptImages.Contains(this))
                {
                    Image.ReceiptImages.Add(this);
                }
                if (ImageId != Image.Id)
                {
                    ImageId = Image.Id;
                }
            }
            else if (!_settingFK)
            {
                /* [NOTE] -- 
    			 * I have commented following, as in case of detaching entities from ObjectState it was making EntityId Null into referenced entities,
    			 * which is not desired behavior for us.
    			 */
                //ImageId = null;
            }
        }
    
        private void FixupReceipt(Receipt previousValue)
        {
            if (previousValue != null && previousValue.ReceiptImages.Contains(this))
            {
                previousValue.ReceiptImages.Remove(this);
            }
    
            if (Receipt != null)
            {
                if (!Receipt.ReceiptImages.Contains(this))
                {
                    Receipt.ReceiptImages.Add(this);
                }
                if (ReceiptId != Receipt.Id)
                {
                    ReceiptId = Receipt.Id;
                }
            }
            else if (!_settingFK)
            {
                /* [NOTE] -- 
    			 * I have commented following, as in case of detaching entities from ObjectState it was making EntityId Null into referenced entities,
    			 * which is not desired behavior for us.
    			 */
                //ReceiptId = null;
            }
        }

        #endregion

    }
}
