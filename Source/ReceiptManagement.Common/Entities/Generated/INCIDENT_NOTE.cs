//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace ResolutionOffice.Common.Entities
{
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class INCIDENT_NOTE : Entities.EntityObject, Helpers.IDataEntity, Helpers.ITrackable
    {
        #region Partial Methods
    
        //	This partial method gives us a way to update an object before it is added to the system.
        static partial void OnCreating();
    
        //	This partial method gives us a way to access an object after it has been added to the system.
        static partial void OnCreated(Entities.INCIDENT_NOTE iNCIDENT_NOTE);

        #endregion

    
        #region Constructors & Factories
    
    	//	Internal constructor since it shouldn't be called outside of the API.
    	//: Making constructor public so that entities can be instantiated by MVC/Telerik controls
    	public INCIDENT_NOTE() 
    	{
    		//this.CreatedOn = this.ModifiedOn = DateTime.Parse("1753-01-01 00:00:00.000"); 
    	}
    
    	/// <summary>
    	///		Creates a new instance of a INCIDENT_NOTE.
    	/// </summary>
    	/// <returns>The new INCIDENT_NOTE instance. </returns>
    	public static Entities.INCIDENT_NOTE Factory()
    	{
    		OnCreating();
    		Entities.INCIDENT_NOTE iNCIDENT_NOTE = new Entities.INCIDENT_NOTE();
    		OnCreated(iNCIDENT_NOTE);
    		
    		return iNCIDENT_NOTE;
    	}

        #endregion

    
        #region Primitive Properties
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual System.Guid ID
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<System.Guid> INCIDENT_ID
        {
            get { return _iNCIDENT_ID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_iNCIDENT_ID != value)
                    {
                        if (INCIDENT != null && INCIDENT.ID != value)
                        {
                            INCIDENT = null;
                        }
                        _iNCIDENT_ID = value;
                    }
    			}
                finally
                {
                    _settingFK = true;
    			}
            }
        }
        private Nullable<System.Guid> _iNCIDENT_ID;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual string NOTES
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual System.DateTime CREATED_ON
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual System.Guid CREATED_BY
        {
            get { return _cREATED_BY; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_cREATED_BY != value)
                    {
                        if (USER != null && USER.ID != value)
                        {
                            USER = null;
                        }
                        _cREATED_BY = value;
                    }
    			}
                finally
                {
                    _settingFK = true;
    			}
            }
        }
        private System.Guid _cREATED_BY;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<System.DateTime> UPDATED_ON
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<System.Guid> UPDATED_BY
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual INCIDENT INCIDENT
        {
            get { return _iNCIDENT; }
            set
            {
                if (!ReferenceEquals(_iNCIDENT, value))
                {
                    var previousValue = _iNCIDENT;
                    _iNCIDENT = value;
                    FixupINCIDENT(previousValue);
                }
            }
        }
        private INCIDENT _iNCIDENT;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual USER USER
        {
            get { return _uSER; }
            set
            {
                if (!ReferenceEquals(_uSER, value))
                {
                    var previousValue = _uSER;
                    _uSER = value;
                    FixupUSER(previousValue);
                }
            }
        }
        private USER _uSER;

        #endregion

        #region Association Fixup
    			
    	private bool _settingFK = false; 
    			
        private void FixupINCIDENT(INCIDENT previousValue)
        {
            if (previousValue != null && previousValue.INCIDENT_NOTE.Contains(this))
            {
                previousValue.INCIDENT_NOTE.Remove(this);
            }
    
            if (INCIDENT != null)
            {
                if (!INCIDENT.INCIDENT_NOTE.Contains(this))
                {
                    INCIDENT.INCIDENT_NOTE.Add(this);
                }
                if (INCIDENT_ID != INCIDENT.ID)
                {
                    INCIDENT_ID = INCIDENT.ID;
                }
            }
            else if (!_settingFK)
            {
                /* [NOTE] -- 
    			 * I have commented following, as in case of detaching entities from ObjectState it was making EntityId Null into referenced entities,
    			 * which is not desired behavior for us.
    			 */
                //INCIDENT_ID = null;
            }
        }
    
        private void FixupUSER(USER previousValue)
        {
            if (previousValue != null && previousValue.INCIDENT_NOTE.Contains(this))
            {
                previousValue.INCIDENT_NOTE.Remove(this);
            }
    
            if (USER != null)
            {
                if (!USER.INCIDENT_NOTE.Contains(this))
                {
                    USER.INCIDENT_NOTE.Add(this);
                }
                if (CREATED_BY != USER.ID)
                {
                    CREATED_BY = USER.ID;
                }
            }
        }

        #endregion

    }
}
