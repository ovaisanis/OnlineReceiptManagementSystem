//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace ReceiptManagement.Common.Entities
{
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class EventsInfo : Entities.EntityObject
    {
        #region Partial Methods
    
        //	This partial method gives us a way to update an object before it is added to the system.
        static partial void OnCreating();
    
        //	This partial method gives us a way to access an object after it has been added to the system.
        static partial void OnCreated(Entities.EventsInfo eventsInfo);

        #endregion

    
        #region Constructors & Factories
    
    	//	Internal constructor since it shouldn't be called outside of the API.
    	//: Making constructor public so that entities can be instantiated by MVC/Telerik controls
    	public EventsInfo() 
    	{
    		//this.CreatedOn = this.ModifiedOn = DateTime.Parse("1753-01-01 00:00:00.000"); 
    	}
    
    	/// <summary>
    	///		Creates a new instance of a EventsInfo.
    	/// </summary>
    	/// <returns>The new EventsInfo instance. </returns>
    	public static Entities.EventsInfo Factory()
    	{
    		OnCreating();
    		Entities.EventsInfo eventsInfo = new Entities.EventsInfo();
    		OnCreated(eventsInfo);
    		
    		return eventsInfo;
    	}

        #endregion

    
        #region Primitive Properties
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<long> My_Product_Service_Id
        {
            get { return _my_Product_Service_Id; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_my_Product_Service_Id != value)
                    {
                        if (My_Products_Services != null && My_Products_Services.Id != value)
                        {
                            My_Products_Services = null;
                        }
                        _my_Product_Service_Id = value;
                    }
    			}
                finally
                {
                    _settingFK = true;
    			}
            }
        }
        private Nullable<long> _my_Product_Service_Id;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<System.DateTime> EventDate
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual string EventName
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual string EventDescription
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<int> NotifyBefore_PeriodValue
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<int> NotifyBefore_PeriodTypeId
        {
            get { return _notifyBefore_PeriodTypeId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_notifyBefore_PeriodTypeId != value)
                    {
                        if (PeriodType != null && PeriodType.Id != value)
                        {
                            PeriodType = null;
                        }
                        _notifyBefore_PeriodTypeId = value;
                    }
    			}
                finally
                {
                    _settingFK = true;
    			}
            }
        }
        private Nullable<int> _notifyBefore_PeriodTypeId;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<int> Reoccurance_PeriodValue
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<int> Reoccurance_PeriodTypeId
        {
            get { return _reoccurance_PeriodTypeId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_reoccurance_PeriodTypeId != value)
                    {
                        if (PeriodType1 != null && PeriodType1.Id != value)
                        {
                            PeriodType1 = null;
                        }
                        _reoccurance_PeriodTypeId = value;
                    }
    			}
                finally
                {
                    _settingFK = true;
    			}
            }
        }
        private Nullable<int> _reoccurance_PeriodTypeId;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<int> EventStatusId
        {
            get { return _eventStatusId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_eventStatusId != value)
                    {
                        if (EventStatus != null && EventStatus.Id != value)
                        {
                            EventStatus = null;
                        }
                        _eventStatusId = value;
                    }
    			}
                finally
                {
                    _settingFK = true;
    			}
            }
        }
        private Nullable<int> _eventStatusId;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<long> UserId
        {
            get { return _userId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_userId != value)
                    {
                        if (User != null && User.Id != value)
                        {
                            User = null;
                        }
                        _userId = value;
                    }
    			}
                finally
                {
                    _settingFK = true;
    			}
            }
        }
        private Nullable<long> _userId;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<System.DateTime> CreatedOn
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<bool> IsDeleted
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual EventStatus EventStatus
        {
            get { return _eventStatus; }
            set
            {
                if (!ReferenceEquals(_eventStatus, value))
                {
                    var previousValue = _eventStatus;
                    _eventStatus = value;
                    FixupEventStatus(previousValue);
                }
            }
        }
        private EventStatus _eventStatus;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual My_Products_Services My_Products_Services
        {
            get { return _my_Products_Services; }
            set
            {
                if (!ReferenceEquals(_my_Products_Services, value))
                {
                    var previousValue = _my_Products_Services;
                    _my_Products_Services = value;
                    FixupMy_Products_Services(previousValue);
                }
            }
        }
        private My_Products_Services _my_Products_Services;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual PeriodType PeriodType
        {
            get { return _periodType; }
            set
            {
                if (!ReferenceEquals(_periodType, value))
                {
                    var previousValue = _periodType;
                    _periodType = value;
                    FixupPeriodType(previousValue);
                }
            }
        }
        private PeriodType _periodType;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual PeriodType PeriodType1
        {
            get { return _periodType1; }
            set
            {
                if (!ReferenceEquals(_periodType1, value))
                {
                    var previousValue = _periodType1;
                    _periodType1 = value;
                    FixupPeriodType1(previousValue);
                }
            }
        }
        private PeriodType _periodType1;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;

        #endregion

        #region Association Fixup
    			
    	private bool _settingFK = false; 
    			
        private void FixupEventStatus(EventStatus previousValue)
        {
            if (previousValue != null && previousValue.EventsInfoes.Contains(this))
            {
                previousValue.EventsInfoes.Remove(this);
            }
    
            if (EventStatus != null)
            {
                if (!EventStatus.EventsInfoes.Contains(this))
                {
                    EventStatus.EventsInfoes.Add(this);
                }
                if (EventStatusId != EventStatus.Id)
                {
                    EventStatusId = EventStatus.Id;
                }
            }
            else if (!_settingFK)
            {
                /* [NOTE] -- 
    			 * I have commented following, as in case of detaching entities from ObjectState it was making EntityId Null into referenced entities,
    			 * which is not desired behavior for us.
    			 */
                //EventStatusId = null;
            }
        }
    
        private void FixupMy_Products_Services(My_Products_Services previousValue)
        {
            if (previousValue != null && previousValue.EventsInfoes.Contains(this))
            {
                previousValue.EventsInfoes.Remove(this);
            }
    
            if (My_Products_Services != null)
            {
                if (!My_Products_Services.EventsInfoes.Contains(this))
                {
                    My_Products_Services.EventsInfoes.Add(this);
                }
                if (My_Product_Service_Id != My_Products_Services.Id)
                {
                    My_Product_Service_Id = My_Products_Services.Id;
                }
            }
            else if (!_settingFK)
            {
                /* [NOTE] -- 
    			 * I have commented following, as in case of detaching entities from ObjectState it was making EntityId Null into referenced entities,
    			 * which is not desired behavior for us.
    			 */
                //My_Product_Service_Id = null;
            }
        }
    
        private void FixupPeriodType(PeriodType previousValue)
        {
            if (previousValue != null && previousValue.EventsInfoes.Contains(this))
            {
                previousValue.EventsInfoes.Remove(this);
            }
    
            if (PeriodType != null)
            {
                if (!PeriodType.EventsInfoes.Contains(this))
                {
                    PeriodType.EventsInfoes.Add(this);
                }
                if (NotifyBefore_PeriodTypeId != PeriodType.Id)
                {
                    NotifyBefore_PeriodTypeId = PeriodType.Id;
                }
            }
            else if (!_settingFK)
            {
                /* [NOTE] -- 
    			 * I have commented following, as in case of detaching entities from ObjectState it was making EntityId Null into referenced entities,
    			 * which is not desired behavior for us.
    			 */
                //NotifyBefore_PeriodTypeId = null;
            }
        }
    
        private void FixupPeriodType1(PeriodType previousValue)
        {
            if (previousValue != null && previousValue.EventsInfoes1.Contains(this))
            {
                previousValue.EventsInfoes1.Remove(this);
            }
    
            if (PeriodType1 != null)
            {
                if (!PeriodType1.EventsInfoes1.Contains(this))
                {
                    PeriodType1.EventsInfoes1.Add(this);
                }
                if (Reoccurance_PeriodTypeId != PeriodType1.Id)
                {
                    Reoccurance_PeriodTypeId = PeriodType1.Id;
                }
            }
            else if (!_settingFK)
            {
                /* [NOTE] -- 
    			 * I have commented following, as in case of detaching entities from ObjectState it was making EntityId Null into referenced entities,
    			 * which is not desired behavior for us.
    			 */
                //Reoccurance_PeriodTypeId = null;
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.EventsInfoes.Contains(this))
            {
                previousValue.EventsInfoes.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.EventsInfoes.Contains(this))
                {
                    User.EventsInfoes.Add(this);
                }
                if (UserId != User.Id)
                {
                    UserId = User.Id;
                }
            }
            else if (!_settingFK)
            {
                /* [NOTE] -- 
    			 * I have commented following, as in case of detaching entities from ObjectState it was making EntityId Null into referenced entities,
    			 * which is not desired behavior for us.
    			 */
                //UserId = null;
            }
        }

        #endregion

    }
}
