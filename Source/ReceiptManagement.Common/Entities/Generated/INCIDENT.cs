//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace ResolutionOffice.Common.Entities
{
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class INCIDENT : Entities.EntityObject, Helpers.IDataEntity, Helpers.ITrackable
    {
        #region Partial Methods
    
        //	This partial method gives us a way to update an object before it is added to the system.
        static partial void OnCreating();
    
        //	This partial method gives us a way to access an object after it has been added to the system.
        static partial void OnCreated(Entities.INCIDENT iNCIDENT);

        #endregion

    
        #region Constructors & Factories
    
    	//	Internal constructor since it shouldn't be called outside of the API.
    	//: Making constructor public so that entities can be instantiated by MVC/Telerik controls
    	public INCIDENT() 
    	{
    		//this.CreatedOn = this.ModifiedOn = DateTime.Parse("1753-01-01 00:00:00.000"); 
    	}
    
    	/// <summary>
    	///		Creates a new instance of a INCIDENT.
    	/// </summary>
    	/// <returns>The new INCIDENT instance. </returns>
    	public static Entities.INCIDENT Factory()
    	{
    		OnCreating();
    		Entities.INCIDENT iNCIDENT = new Entities.INCIDENT();
    		OnCreated(iNCIDENT);
    		
    		return iNCIDENT;
    	}

        #endregion

    
        #region Primitive Properties
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual System.Guid ID
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<System.Guid> SETTLEMENT_ID
        {
            get { return _sETTLEMENT_ID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_sETTLEMENT_ID != value)
                    {
                        if (SETTLEMENT != null && SETTLEMENT.ID != value)
                        {
                            SETTLEMENT = null;
                        }
                        _sETTLEMENT_ID = value;
                    }
    			}
                finally
                {
                    _settingFK = true;
    			}
            }
        }
        private Nullable<System.Guid> _sETTLEMENT_ID;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<System.Guid> RESPONDENT_ID
        {
            get { return _rESPONDENT_ID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_rESPONDENT_ID != value)
                    {
                        if (USER_RESPONDENT != null && USER_RESPONDENT.ID != value)
                        {
                            USER_RESPONDENT = null;
                        }
                        _rESPONDENT_ID = value;
                    }
    			}
                finally
                {
                    _settingFK = true;
    			}
            }
        }
        private Nullable<System.Guid> _rESPONDENT_ID;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<System.Guid> COMPLAINANT_ID
        {
            get { return _cOMPLAINANT_ID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_cOMPLAINANT_ID != value)
                    {
                        if (USER_COMPLAINANT != null && USER_COMPLAINANT.ID != value)
                        {
                            USER_COMPLAINANT = null;
                        }
                        _cOMPLAINANT_ID = value;
                    }
    			}
                finally
                {
                    _settingFK = true;
    			}
            }
        }
        private Nullable<System.Guid> _cOMPLAINANT_ID;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<System.Guid> INCIDENT_TYPE_ID
        {
            get { return _iNCIDENT_TYPE_ID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_iNCIDENT_TYPE_ID != value)
                    {
                        if (INCIDENT_TYPE != null && INCIDENT_TYPE.ID != value)
                        {
                            INCIDENT_TYPE = null;
                        }
                        _iNCIDENT_TYPE_ID = value;
                    }
    			}
                finally
                {
                    _settingFK = true;
    			}
            }
        }
        private Nullable<System.Guid> _iNCIDENT_TYPE_ID;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<System.Guid> INCIDENT_STATE_ID
        {
            get { return _iNCIDENT_STATE_ID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_iNCIDENT_STATE_ID != value)
                    {
                        if (INCIDENT_STATE != null && INCIDENT_STATE.ID != value)
                        {
                            INCIDENT_STATE = null;
                        }
                        _iNCIDENT_STATE_ID = value;
                    }
    			}
                finally
                {
                    _settingFK = true;
    			}
            }
        }
        private Nullable<System.Guid> _iNCIDENT_STATE_ID;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual string RO_NUMBER
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual string INCIDENT_DESC
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<System.DateTime> INCIDENT_DATE
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual System.DateTime CREATED_ON
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual System.Guid CREATED_BY
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<System.DateTime> UPDATED_ON
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual Nullable<System.Guid> UPDATED_BY
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual INCIDENT_TYPE INCIDENT_TYPE
        {
            get { return _iNCIDENT_TYPE; }
            set
            {
                if (!ReferenceEquals(_iNCIDENT_TYPE, value))
                {
                    var previousValue = _iNCIDENT_TYPE;
                    _iNCIDENT_TYPE = value;
                    FixupINCIDENT_TYPE(previousValue);
                }
            }
        }
        private INCIDENT_TYPE _iNCIDENT_TYPE;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual INCIDENT_STATE INCIDENT_STATE
        {
            get { return _iNCIDENT_STATE; }
            set
            {
                if (!ReferenceEquals(_iNCIDENT_STATE, value))
                {
                    var previousValue = _iNCIDENT_STATE;
                    _iNCIDENT_STATE = value;
                    FixupINCIDENT_STATE(previousValue);
                }
            }
        }
        private INCIDENT_STATE _iNCIDENT_STATE;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual SETTLEMENT SETTLEMENT
        {
            get { return _sETTLEMENT; }
            set
            {
                if (!ReferenceEquals(_sETTLEMENT, value))
                {
                    var previousValue = _sETTLEMENT;
                    _sETTLEMENT = value;
                    FixupSETTLEMENT(previousValue);
                }
            }
        }
        private SETTLEMENT _sETTLEMENT;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual USER USER_COMPLAINANT
        {
            get { return _uSER_COMPLAINANT; }
            set
            {
                if (!ReferenceEquals(_uSER_COMPLAINANT, value))
                {
                    var previousValue = _uSER_COMPLAINANT;
                    _uSER_COMPLAINANT = value;
                    FixupUSER_COMPLAINANT(previousValue);
                }
            }
        }
        private USER _uSER_COMPLAINANT;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual USER USER_RESPONDENT
        {
            get { return _uSER_RESPONDENT; }
            set
            {
                if (!ReferenceEquals(_uSER_RESPONDENT, value))
                {
                    var previousValue = _uSER_RESPONDENT;
                    _uSER_RESPONDENT = value;
                    FixupUSER_RESPONDENT(previousValue);
                }
            }
        }
        private USER _uSER_RESPONDENT;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual ICollection<INCIDENT_ATTACHMENT> INCIDENT_ATTACHMENT
        {
            get
            {
                if (_iNCIDENT_ATTACHMENT == null)
                {
                    var newCollection = new FixupCollection<INCIDENT_ATTACHMENT>();
                    newCollection.CollectionChanged += FixupINCIDENT_ATTACHMENT;
                    _iNCIDENT_ATTACHMENT = newCollection;
                }
                return _iNCIDENT_ATTACHMENT;
            }
            set
            {
                if (!ReferenceEquals(_iNCIDENT_ATTACHMENT, value))
                {
                    var previousValue = _iNCIDENT_ATTACHMENT as FixupCollection<INCIDENT_ATTACHMENT>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupINCIDENT_ATTACHMENT;
                    }
                    _iNCIDENT_ATTACHMENT = value;
                    var newValue = value as FixupCollection<INCIDENT_ATTACHMENT>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupINCIDENT_ATTACHMENT;
                    }
                }
            }
        }
        private ICollection<INCIDENT_ATTACHMENT> _iNCIDENT_ATTACHMENT;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual ICollection<INCIDENT_ACTIVITY> INCIDENT_ACTIVITY
        {
            get
            {
                if (_iNCIDENT_ACTIVITY == null)
                {
                    var newCollection = new FixupCollection<INCIDENT_ACTIVITY>();
                    newCollection.CollectionChanged += FixupINCIDENT_ACTIVITY;
                    _iNCIDENT_ACTIVITY = newCollection;
                }
                return _iNCIDENT_ACTIVITY;
            }
            set
            {
                if (!ReferenceEquals(_iNCIDENT_ACTIVITY, value))
                {
                    var previousValue = _iNCIDENT_ACTIVITY as FixupCollection<INCIDENT_ACTIVITY>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupINCIDENT_ACTIVITY;
                    }
                    _iNCIDENT_ACTIVITY = value;
                    var newValue = value as FixupCollection<INCIDENT_ACTIVITY>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupINCIDENT_ACTIVITY;
                    }
                }
            }
        }
        private ICollection<INCIDENT_ACTIVITY> _iNCIDENT_ACTIVITY;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual ICollection<INCIDENT_NOTE> INCIDENT_NOTE
        {
            get
            {
                if (_iNCIDENT_NOTE == null)
                {
                    var newCollection = new FixupCollection<INCIDENT_NOTE>();
                    newCollection.CollectionChanged += FixupINCIDENT_NOTE;
                    _iNCIDENT_NOTE = newCollection;
                }
                return _iNCIDENT_NOTE;
            }
            set
            {
                if (!ReferenceEquals(_iNCIDENT_NOTE, value))
                {
                    var previousValue = _iNCIDENT_NOTE as FixupCollection<INCIDENT_NOTE>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupINCIDENT_NOTE;
                    }
                    _iNCIDENT_NOTE = value;
                    var newValue = value as FixupCollection<INCIDENT_NOTE>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupINCIDENT_NOTE;
                    }
                }
            }
        }
        private ICollection<INCIDENT_NOTE> _iNCIDENT_NOTE;

        #endregion

        #region Association Fixup
    			
    	private bool _settingFK = false; 
    			
        private void FixupINCIDENT_TYPE(INCIDENT_TYPE previousValue)
        {
            if (previousValue != null && previousValue.INCIDENTS.Contains(this))
            {
                previousValue.INCIDENTS.Remove(this);
            }
    
            if (INCIDENT_TYPE != null)
            {
                if (!INCIDENT_TYPE.INCIDENTS.Contains(this))
                {
                    INCIDENT_TYPE.INCIDENTS.Add(this);
                }
                if (INCIDENT_TYPE_ID != INCIDENT_TYPE.ID)
                {
                    INCIDENT_TYPE_ID = INCIDENT_TYPE.ID;
                }
            }
            else if (!_settingFK)
            {
                /* [NOTE] -- 
    			 * I have commented following, as in case of detaching entities from ObjectState it was making EntityId Null into referenced entities,
    			 * which is not desired behavior for us.
    			 */
                //INCIDENT_TYPE_ID = null;
            }
        }
    
        private void FixupINCIDENT_STATE(INCIDENT_STATE previousValue)
        {
            if (previousValue != null && previousValue.INCIDENTS.Contains(this))
            {
                previousValue.INCIDENTS.Remove(this);
            }
    
            if (INCIDENT_STATE != null)
            {
                if (!INCIDENT_STATE.INCIDENTS.Contains(this))
                {
                    INCIDENT_STATE.INCIDENTS.Add(this);
                }
                if (INCIDENT_STATE_ID != INCIDENT_STATE.ID)
                {
                    INCIDENT_STATE_ID = INCIDENT_STATE.ID;
                }
            }
            else if (!_settingFK)
            {
                /* [NOTE] -- 
    			 * I have commented following, as in case of detaching entities from ObjectState it was making EntityId Null into referenced entities,
    			 * which is not desired behavior for us.
    			 */
                //INCIDENT_STATE_ID = null;
            }
        }
    
        private void FixupSETTLEMENT(SETTLEMENT previousValue)
        {
            if (previousValue != null && previousValue.INCIDENTS.Contains(this))
            {
                previousValue.INCIDENTS.Remove(this);
            }
    
            if (SETTLEMENT != null)
            {
                if (!SETTLEMENT.INCIDENTS.Contains(this))
                {
                    SETTLEMENT.INCIDENTS.Add(this);
                }
                if (SETTLEMENT_ID != SETTLEMENT.ID)
                {
                    SETTLEMENT_ID = SETTLEMENT.ID;
                }
            }
            else if (!_settingFK)
            {
                /* [NOTE] -- 
    			 * I have commented following, as in case of detaching entities from ObjectState it was making EntityId Null into referenced entities,
    			 * which is not desired behavior for us.
    			 */
                //SETTLEMENT_ID = null;
            }
        }
    
        private void FixupUSER_COMPLAINANT(USER previousValue)
        {
            if (previousValue != null && previousValue.INCIDENTS_COMPLAINANT.Contains(this))
            {
                previousValue.INCIDENTS_COMPLAINANT.Remove(this);
            }
    
            if (USER_COMPLAINANT != null)
            {
                if (!USER_COMPLAINANT.INCIDENTS_COMPLAINANT.Contains(this))
                {
                    USER_COMPLAINANT.INCIDENTS_COMPLAINANT.Add(this);
                }
                if (COMPLAINANT_ID != USER_COMPLAINANT.ID)
                {
                    COMPLAINANT_ID = USER_COMPLAINANT.ID;
                }
            }
            else if (!_settingFK)
            {
                /* [NOTE] -- 
    			 * I have commented following, as in case of detaching entities from ObjectState it was making EntityId Null into referenced entities,
    			 * which is not desired behavior for us.
    			 */
                //COMPLAINANT_ID = null;
            }
        }
    
        private void FixupUSER_RESPONDENT(USER previousValue)
        {
            if (previousValue != null && previousValue.INCIDENTS_RESPONDENT.Contains(this))
            {
                previousValue.INCIDENTS_RESPONDENT.Remove(this);
            }
    
            if (USER_RESPONDENT != null)
            {
                if (!USER_RESPONDENT.INCIDENTS_RESPONDENT.Contains(this))
                {
                    USER_RESPONDENT.INCIDENTS_RESPONDENT.Add(this);
                }
                if (RESPONDENT_ID != USER_RESPONDENT.ID)
                {
                    RESPONDENT_ID = USER_RESPONDENT.ID;
                }
            }
            else if (!_settingFK)
            {
                /* [NOTE] -- 
    			 * I have commented following, as in case of detaching entities from ObjectState it was making EntityId Null into referenced entities,
    			 * which is not desired behavior for us.
    			 */
                //RESPONDENT_ID = null;
            }
        }
    
        private void FixupINCIDENT_ATTACHMENT(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (INCIDENT_ATTACHMENT item in e.NewItems)
                {
                    item.INCIDENT = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (INCIDENT_ATTACHMENT item in e.OldItems)
                {
                    if (ReferenceEquals(item.INCIDENT, this))
                    {
                        item.INCIDENT = null;
                    }
                }
            }
        }
    
        private void FixupINCIDENT_ACTIVITY(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (INCIDENT_ACTIVITY item in e.NewItems)
                {
                    item.INCIDENT = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (INCIDENT_ACTIVITY item in e.OldItems)
                {
                    if (ReferenceEquals(item.INCIDENT, this))
                    {
                        item.INCIDENT = null;
                    }
                }
            }
        }
    
        private void FixupINCIDENT_NOTE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (INCIDENT_NOTE item in e.NewItems)
                {
                    item.INCIDENT = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (INCIDENT_NOTE item in e.OldItems)
                {
                    if (ReferenceEquals(item.INCIDENT, this))
                    {
                        item.INCIDENT = null;
                    }
                }
            }
        }

        #endregion

    }
}
