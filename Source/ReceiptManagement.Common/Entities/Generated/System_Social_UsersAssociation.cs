//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace ReceiptManagement.Common.Entities
{
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class System_Social_UsersAssociation : Entities.EntityObject
    {
        #region Partial Methods
    
        //	This partial method gives us a way to update an object before it is added to the system.
        static partial void OnCreating();
    
        //	This partial method gives us a way to access an object after it has been added to the system.
        static partial void OnCreated(Entities.System_Social_UsersAssociation system_Social_UsersAssociation);

        #endregion

    
        #region Constructors & Factories
    
    	//	Internal constructor since it shouldn't be called outside of the API.
    	//: Making constructor public so that entities can be instantiated by MVC/Telerik controls
    	public System_Social_UsersAssociation() 
    	{
    		//this.CreatedOn = this.ModifiedOn = DateTime.Parse("1753-01-01 00:00:00.000"); 
    	}
    
    	/// <summary>
    	///		Creates a new instance of a System_Social_UsersAssociation.
    	/// </summary>
    	/// <returns>The new System_Social_UsersAssociation instance. </returns>
    	public static Entities.System_Social_UsersAssociation Factory()
    	{
    		OnCreating();
    		Entities.System_Social_UsersAssociation system_Social_UsersAssociation = new Entities.System_Social_UsersAssociation();
    		OnCreated(system_Social_UsersAssociation);
    		
    		return system_Social_UsersAssociation;
    	}

        #endregion

    
        #region Primitive Properties
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual long Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (User != null && User.Id != value)
                    {
                        User = null;
                    }
                    _id = value;
                }
            }
        }
        private long _id;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual long UserId
        {
            get;
            set;
        }
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public virtual long SocialUserId
        {
            get { return _socialUserId; }
            set
            {
                if (_socialUserId != value)
                {
                    if (SocialUser != null && SocialUser.Id != value)
                    {
                        SocialUser = null;
                    }
                    _socialUserId = value;
                }
            }
        }
        private long _socialUserId;

        #endregion

        #region Navigation Properties
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual SocialUser SocialUser
        {
            get { return _socialUser; }
            set
            {
                if (!ReferenceEquals(_socialUser, value))
                {
                    var previousValue = _socialUser;
                    _socialUser = value;
                    FixupSocialUser(previousValue);
                }
            }
        }
        private SocialUser _socialUser;
    
    	/// <summary>
        /// No Metadata Documentation available.
        /// </summary>
    	[System.Web.Script.Serialization.ScriptIgnore]
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;

        #endregion

        #region Association Fixup
    
        private void FixupSocialUser(SocialUser previousValue)
        {
            if (previousValue != null && previousValue.System_Social_UsersAssociation.Contains(this))
            {
                previousValue.System_Social_UsersAssociation.Remove(this);
            }
    
            if (SocialUser != null)
            {
                if (!SocialUser.System_Social_UsersAssociation.Contains(this))
                {
                    SocialUser.System_Social_UsersAssociation.Add(this);
                }
                if (SocialUserId != SocialUser.Id)
                {
                    SocialUserId = SocialUser.Id;
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.System_Social_UsersAssociation, this))
            {
                previousValue.System_Social_UsersAssociation = null;
            }
    
            if (User != null)
            {
                User.System_Social_UsersAssociation = this;
                if (Id != User.Id)
                {
                    Id = User.Id;
                }
            }
        }

        #endregion

    }
}
