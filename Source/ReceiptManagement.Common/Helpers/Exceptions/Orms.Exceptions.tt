<#
//*********************************************************
//    EResolutionOffice
//*********************************************************
#>
<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#><# 

CodeGenerationTools code = new CodeGenerationTools(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
string namespaceName = code.VsNamespaceSuggestion();
   
// Write out support code to primary template output file
WriteHeader(fileManager);
BeginNamespace(namespaceName, code);
EndNamespace(namespaceName);

// Exception Entities to generate
System.Collections.Hashtable exceptions = new System.Collections.Hashtable();
exceptions["EResolutionOfficeApi"]  			= "The exception thrown for un categorized errors.";
exceptions["AddEntity"] 			= "The exception thrown when an error occurs while adding an entity.";
exceptions["DeleteEntity"] 			= "The exception thrown when an error occurs while deleting an entity.";
exceptions["Exists"] 				= "The exception thrown when an error occurs while calling existance of an entity check based on where clause.";
exceptions["GetEntity"] 			= "The exception thrown when an error occurs while getting an entity.";
exceptions["ImportEntity"] 			= "The exception thrown when an error occurs while importing an entity.";
exceptions["InvalidExpression"] 	= "The exception thrown when an error occurs while adding an entity.";
exceptions["MessageNotFound"] 		= "The exception thrown when an error occurs while message not found against a message code.";
exceptions["NotAuthenticated"] 		= "The exception thrown when an error occurs when a user authentication failed.";
exceptions["NotAuthorized"] 		= "The exception thrown when an error occurs when a user isn't authorized for an action they are taking.";
exceptions["OptimisticConcurrency"] = "The exception thrown when an error occurs while the entity you are going to update is already modified by another user.";
exceptions["Transaction"] 			= "The exception thrown when an error occurs while adding an entity.";
exceptions["UpdateEntity"] 			= "The exception thrown when an error occurs while updating an entity.";
exceptions["QuerySetting"] 			= "The exception thrown when an error occurs in querySettingsextended class.";


// Emit Entity Types
foreach (System.Collections.DictionaryEntry exception in exceptions)
{
	System.String exceptionName = exception.Key.ToString();
	System.String exceptionDesc = exception.Value.ToString();
	
    fileManager.StartNewFile(exceptionName + "Exception.cs");
    BeginNamespace(namespaceName, code);#>
/// <summary>
///	<#= exceptionDesc #>
/// </summary>
[System.Serializable]
public sealed class <#= exceptionName #>Exception : System.Exception
{
	#region Constructors & Factories

    //	Internal constructors since they shouldn't be called outside of the API.
    internal <#= exceptionName #>Exception() { }
	internal <#= exceptionName #>Exception(System.Exception innerException) : base(innerException.Message, innerException) { }
    internal <#= exceptionName #>Exception(System.String message):base(message) { }
		
	/// <summary>
	///		The factory used to a new <#= exceptionName #>Exception with inner exception.
	/// </summary>
    public static Helpers.Exceptions.<#= exceptionName #>Exception Factory(System.Exception innerException)
	{		
        return new Helpers.Exceptions.<#= exceptionName #>Exception(innerException);
    }
	
	/// <summary>
	///		The factory used to a new <#= exceptionName #>Exception with a message.
	/// </summary>
    public static Helpers.Exceptions.<#= exceptionName #>Exception Factory(System.String message)
	{
        return new Helpers.Exceptions.<#= exceptionName #>Exception(message);
    }
		
	#endregion
}
<# EndNamespace(namespaceName); 	
}

fileManager.Process();
#>
 
<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}
#>